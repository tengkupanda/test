# Import necessary libraries
import ipywidgets as widgets
from IPython.display import display, clear_output

# Helper functions for stack operations
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def pop(self):
        if not self.is_empty():
            return self.items.pop()
        return None

    def push(self, item):
        self.items.append(item)

    def peek(self):
        if not self.is_empty():
            return self.items[-1]
        return None

# Helper functions for infix to postfix conversion and evaluation
def precedence(op):
    if op in ('+', '-'):
        return 1
    if op in ('*', '/'):
        return 2
    if op == '^':
        return 3
    return 0

def is_operator(c):
    return c in ('+', '-', '*', '/', '^')

def preprocess_expression(expression):
    # Add spaces around operators and parentheses for easy tokenization
    for char in '()+-*/^':
        expression = expression.replace(char, f' {char} ')
    return ' '.join(expression.split())  # Remove extra spaces

def is_valid_expression(expression):
    stack = Stack()
    tokens = expression.split()
    for char in tokens:
        if char == '(':
            stack.push(char)
        elif char == ')':
            if stack.is_empty():
                return False  # Unmatched closing parenthesis
            stack.pop()
    return stack.is_empty()  # Ensure no unmatched opening parenthesis

def infix_to_postfix(expression):
    stack = Stack()
    postfix = []
    tokens = expression.split()
    for token in tokens:
        if token.isalnum():  # Operand
            postfix.append(token)
        elif token == '(':
            stack.push(token)
        elif token == ')':
            while not stack.is_empty() and stack.peek() != '(':
                postfix.append(stack.pop())
            stack.pop()  # Remove '('
        elif is_operator(token):
            while (not stack.is_empty() and precedence(stack.peek()) >= precedence(token)):
                postfix.append(stack.pop())
            stack.push(token)
    while not stack.is_empty():
        postfix.append(stack.pop())
    return ' '.join(postfix)

def evaluate_postfix(postfix):
    stack = Stack()
    tokens = postfix.split()
    for token in tokens:
        if token.isdigit():  # Operand
            stack.push(int(token))
        elif is_operator(token):  # Operator
            right = stack.pop()
            left = stack.pop()
            if token == '+':
                stack.push(left + right)
            elif token == '-':
                stack.push(left - right)
            elif token == '*':
                stack.push(left * right)
            elif token == '/':
                stack.push(left / right)
            elif token == '^':
                stack.push(left ** right)
    return stack.pop()

# List of members
members = [
    {"name": "MOHAMMAD SALEHUDDIN BIN IWAN", "matric_number": "2316587"},
    {"name": "MUHAMMAD SHAFIQ BIN HAJA SALIM", "matric_number": "2310633"},
    {"name": "MUHAMMAD ARIF DANIAL BIN MOHAMAD HANIF", "matric_number": "2013557"},
    {"name": "SYAZWAN FARIZ BIN SHAMSUL AZMAR", "matric_number": "2012003"},
]

# Function to display members' names and matric numbers
def display_members():
    member_list = ""
    for member in members:
        member_list += f"Name: {member['name']}, Matric Number: {member['matric_number']}\n"
    return member_list

# Define callback for button click
def on_button_click(change):
    clear_output()
    display(input_box, button, postfix_output, result_output, member_list_output)
    infix_expression = input_box.value.strip()
    infix_expression = preprocess_expression(infix_expression)  # Preprocess expression
    if not is_valid_expression(infix_expression):
        postfix_output.value = "Invalid expression! Parentheses are not balanced."
        result_output.value = ""
        return
    try:
        postfix = infix_to_postfix(infix_expression)
        result = evaluate_postfix(postfix)
        postfix_output.value = f"Postfix Expression: {postfix}"
        result_output.value = f"Result: {result}"
    except Exception as e:
        postfix_output.value = f"Error processing the expression: {e}"
        result_output.value = ""

# Create input box and button
input_box = widgets.Text(
    value="",
    placeholder="Enter an infix expression (e.g., (3 + 5) * 2)",
    description="Expression:",
    layout=widgets.Layout(width="80%"),
)

button = widgets.Button(
    description="Convert and Evaluate",
    button_style="success",
    tooltip="Click to convert and evaluate",
    icon="check",
)
button.on_click(on_button_click)

# Output areas
postfix_output = widgets.Textarea(
    value="",
    description="Postfix:",
    layout=widgets.Layout(width="80%", height="50px"),
    disabled=True,
)

result_output = widgets.Textarea(
    value="",
    description="Result:",
    layout=widgets.Layout(width="80%", height="50px"),
    disabled=True,
)

# Display member list
member_list_output = widgets.Textarea(
    value=display_members(),
    description="Members:",
    layout=widgets.Layout(width="80%", height="150px"),
    disabled=True,
)

# Display widgets
display(input_box, button, postfix_output, result_output, member_list_output)
